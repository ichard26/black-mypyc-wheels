name: Build wheels

on:
  workflow_dispatch:
    inputs:
      revision:
        description: Revision from psf/black to compile.
        required: true
        default: mypyc-support-pt2

jobs:
  build:
    name: ${{ matrix.name }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: linux
            # Black needs clang to compile successfully on Linux. -g0 disables debug symbols
            # which cuts down the wheel size a fair bit!
            extra_environment: "CC=clang CFLAGS=-g0"
            extra_before_build: "&& yum install -y clang"

          - os: windows-2019
            name: windows
            # For some reason, (compiled) mypyc is failing to start up with
            # "ImportError: DLL load failed: A dynamic link library (DLL) initialization routine failed."
            # on Windows for at least 3.6. Let's just use interpreted mypy[c].
            # See also: https://github.com/mypyc/mypyc/issues/819.
            extra_before_build: "--no-binary mypy"

          # Split MacOS builds between two jobs since there's a lot of wheels to build!
          - os: macos-10.15
            name: macos-intel
            macos_arch: "x86_64"
            extra_environment: "CFLAGS=-g0"

          - os: macos-10.15
            name: macos-arm
            # Support Apple Silicon via cross-compiling on Intel. Unfornately arm64 can't
            # be tested on Intel so we'll have to skip them (see below).
            macos_arch: "arm64 universal2"
            extra_environment: "CFLAGS=-g0"

    steps:
      - uses: actions/checkout@v2

      - name: Checkout requested revision of Black
        uses: actions/checkout@v2
        with:
          repository: psf/black
          ref: "${{ github.event.inputs.revision }}"
          path: "."
          # setuptools-scm needs the commit (or tag?) history to be able to determine
          # how a distribution should be versioned, and sadly I can't find a way to
          # do a treeless or blobless clone with actions/checkout ._.
          fetch-depth: 0

      # This MUST go after the initial clone of Black or else it would first clean this
      # directory and this clone as well before cloning Black.
      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          path: .mypyc-support

      - name: Build wheels
        uses: pypa/cibuildwheel@v1.12.0
        env:
          # So these are the environments we are targeting:
          # - CPython 3.6 and higher (no PyPy)
          # - 64-bit only
          # - ARCH: amd64, x86_64, and universal2
          # - OSes: Linux, Windows, and MacOS
          CIBW_BUILD: "cp3*-*"
          CIBW_ARCHS_MACOS: "${{ matrix.macos_arch }}"
          CIBW_SKIP: "*-manylinux_i686 *-win32 pp-*"

          # The double negative is counterintuitive, https://github.com/pypa/pip/issues/5735.
          CIBW_ENVIRONMENT: "BLACK_USE_MYPYC=1 MYPYC_OPT_LEVEL=3 PIP_NO_BUILD_ISOLATION=no ${{ matrix.extra_environment }}"
          CIBW_BEFORE_BUILD: "pip install -r .mypyc-support/mypyc-requirements.txt ${{ matrix.extra_before_build }}"

          CIBW_BEFORE_TEST: "pip install -r .mypyc-support/test-requirements.txt"
          CIBW_TEST_COMMAND: 'pytest {project} -k "not incompatible_with_mypyc"'
          CIBW_TEST_EXTRAS: "python2,d,jupyter"
          # Skip trying to test arm64 builds on Intel Macs.
          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"

          CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6.2"
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}-wheels
          path: ./wheelhouse/*.whl
